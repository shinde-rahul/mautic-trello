<?php

declare(strict_types=1);

namespace MauticPlugin\MauticTrelloBundle\Service;

use GuzzleHttp\Client as HttpClient;
use Mautic\CoreBundle\Helper\CoreParametersHelper;
use MauticPlugin\MauticTrelloBundle\Integration\Config;
use MauticPlugin\MauticTrelloBundle\Openapi\lib\Api\DefaultApi;
use MauticPlugin\MauticTrelloBundle\Openapi\lib\ApiException;
use MauticPlugin\MauticTrelloBundle\Openapi\lib\Configuration;
use MauticPlugin\MauticTrelloBundle\Openapi\lib\Model\Card;
use MauticPlugin\MauticTrelloBundle\Openapi\lib\Model\CardError;
use Psr\Log\LoggerInterface;

/**
 * Provide the auto generated Trello API to the MauticTrelloBundle.
 */
class TrelloApiService
{
    public function __construct(private CoreParametersHelper $coreParametersHelper, private LoggerInterface $logger, private Config $config)
    {
    }

    /**
     * Return the Api to Trello. Which is autogenerated from an OpenAPI specificaton.
     */
    public function getApi(): DefaultApi|bool
    {
        // setup auth
        $auth = $this->getAuthParams();
        if (!$this->config->isPublished() && !$this->config->isConfigured()) {
            return false;
        }

        Configuration::getDefaultConfiguration()->setApiKey('key', $auth['key']);
        $config = Configuration::getDefaultConfiguration()->setApiKey('token', $auth['token']);

        return new DefaultApi(
            new HttpClient(),
            $config
        );
    }

    /**
     * Get all Trello boards as an array (id => name).
     */
    public function getBoardsArray(string $filter = 'open'): array
    {
        try {
            $api = $this->getApi();
            if (!$api) {
                return [];
            }

            $fields      = 'id,name';
            $boards      = $api->getBoards($fields, $filter);
            $boardsArray = [];
            foreach ($boards as $board) {
                $boardsArray[$board->getId()] = $board->getName();
            }

            return $boardsArray;
        } catch (ApiException $e) {
            $this->logger->warning('API Exception when calling DefaultApi->getBoards(): ', [$e->getMessage()]);

            return [];
        }
    }

    /**
     * Get the users favourite board from Settings.
     */
    public function getFavouriteBoard(): string
    {
        return $this->coreParametersHelper->get('favorite_board', '');
    }

    /**
     * Get all the lists on the Trello board.
     *
     * @param int|null $boardId Trello Board id
     */
    public function getListsOnBoard(int $boardId = null): array
    {
        $api = $this->getApi();
        if (!$api) {
            return [];
        }

        if (empty($boardId)) {
            $boardId = $this->getFavouriteBoard();
            if (empty($boardId)) {
                $this->logger->warning('no board configured');

                return [];
            }
        }

        try {
            return $api->getLists($boardId);
        } catch (ApiException $e) {
            $this->logger->warning('API Exception when calling DefaultApi->getLists(): ', [$e->getMessage()]);

            return [];
        } catch (\Exception $e) {
            $this->logger->warning('Exception when calling DefaultApi->getLists(): ', [$e->getMessage()]);

            return [];
        }
    }

    /**
     * Get the user specific auth params of the Trello API to add to the post part.
     */
    public function getAuthParams(): array
    {
        if (!$this->config->isPublished() && !$this->config->isConfigured()) {
            return [];
        }

        $keys = $this->config->getApiKeys();

        if (empty($keys['appkey']) || empty($keys['apitoken'])) {
            $this->logger->info('No valid Trello api keys');

            return [];
        }

        return [
            'key'   => isset($keys['appkey']) ? $keys['appkey'] : '',
            'token' => isset($keys['apitoken']) ? $keys['apitoken'] : '',
        ];
    }

    /**
     * All the business logic for a submitted form.
     */
    public function addNewCard(array $card): Card|\Exception|CardError
    {
        $api = $this->getApi();
        if (!$api) {
            return new Card();
        }

        try {
            $card = $api->addCard($card);
            if ($card instanceof Card) {
                $this->logger->debug('Successfully added card to Trello', [$card->getIdList(), $card->getId(), $card->getName()]);
            }

            return $card;
        } catch (\InvalidArgumentException $e) {
            $this->logger->warning($e->getMessage(), $e->getTrace());

            return new \Exception('InvalidArgument: '.$e->getMessage());
        } catch (\Exception $e) {
            $this->logger->error($e->getMessage(), $e->getTrace());

            return new \Exception($e->getMessage());
        }

        // return $this->redirectToRoute('task_success');
    }
}
